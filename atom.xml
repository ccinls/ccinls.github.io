<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://cclog.net</id>
    <title>超哥的LOG</title>
    <updated>2020-02-25T20:12:16.943Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://cclog.net"/>
    <link rel="self" href="https://cclog.net/atom.xml"/>
    <subtitle>我看到了我的爱恋 我飞到她的身边 我捧出给她的礼物 那是一小块凝固的时间</subtitle>
    <logo>https://cclog.net/images/avatar.png</logo>
    <icon>https://cclog.net/favicon.ico</icon>
    <rights>All rights reserved 2020, 超哥的LOG</rights>
    <entry>
        <title type="html"><![CDATA[软路由 OpenWrt + SmartDNS + PassWall + Haproxy 配置以及优化]]></title>
        <id>https://cclog.net/post/setting-openwrt-smartdns-passwall-haproxy/</id>
        <link href="https://cclog.net/post/setting-openwrt-smartdns-passwall-haproxy/">
        </link>
        <updated>2020-02-25T17:43:04.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0-前言">0. 前言</h1>
<p>疫情期间，大家都宅在家里，厨艺应该都大涨了吧（手动狗头）。</p>
<p>这期间，我也花了一点点时间，配置了一个软路由，全屋终于可以无痛科学上网，网速也还不错。后面我会放测速的截图。</p>
<p>这期间，我也有看一些 Youtuber 分享的教程和一些经验，但对于大多 Youtuber 的内容，我只能说仅仅是恰好跑起来了，并没有真正的去调优，甚至有些地方不求甚解。对我就是说的大家吵了很久的 SmartDNS，我可以负责任的说，就我发这篇 Blog 之前，所有的 Youtube 上教大家配置 SmartDNS 都是有问题的，只能说可以运行，如果只配置了国外的DNS甚至有可能会拖慢整体网速。好了，接下来我们从 SmartDNS 开始。</p>
<p>对了，我目前使用的是 esir 编译的 OpenWrt，我们没有使用 IPv6，如果你使用别的版本，或者开启的IPv6，可能会有一些不一样，但是整体思路都是一样的。</p>
<h1 id="1smartdns">1.SmartDNS</h1>
<p>开始之前，我先谈谈 SmartDNS，大家对它最为认可的地方在于，可以 <strong>返回测速（基于 PING 的 TTL 或 TCP连接时间 ) 结果最快的 IP</strong>，在某种程度上，提高用户的使用体验，特别是对于移动，联通以及一些不知名的宽带运营商，有不错的效果。</p>
<p>在 OpenWrt 里面开启 SmartDNS非常简单，我就用一张截图解决问题，由于 SmartDNS 能返回速度最快的 IP，所以下面上游 DNS 可以随便填写，甚至越多越好。为了让篇幅不要太长，我只截了其中一部分DNS。<br>
<img src="https://cclog.net/post-images/1582654904220.jpg" alt="" loading="lazy"><br>
这样就完了么，目前我看到所有的 youtuber 教学视频到这里就结束了。<br>
有一次我无聊看了一下系统生成的配置文件，我笑了。如果只是这样配置，根本没有用上 SmarDNS 的核心功能——测速并返回速度最快的IP。查看方法非常简单，见下图。<br>
<img src="https://cclog.net/post-images/1582655428546.png" alt="" loading="lazy"><br>
SmartDNS配置有一个选项 <code>speed-check-mode</code>，默认值是 <code>无</code>，具体可以在 <a href="https://github.com/pymumu/smartdns">SmartDNS</a> 的 Github 上查看官方文档。如果不设置，那么就不会启用测速模式，也就和大多数DNS工具没差别了。当然，也就没有很多 Youtuber 鼓吹的功能。<br>
具体解决方法非常简单，去到自定义设置里面，加上 <code>speed-check-mode tcp:443,tcp:80,ping</code> 这行就可以。具体测速逻辑，可以根据个人情况做调整。</p>
<h1 id="2-passwall">2. PassWall</h1>
<p>这部分就比较简单了，首先添加节点 （ VPN -&gt; 正确上网姿势 √ -&gt; 节点列表 -&gt; 添加），具体根据各种的机场情况以及要求的配置手动添加或者通过链接订阅。这个地方也能参考一些 Youtuber 的教程，具体我就不说名字了，一搜一大把。<br>
因为我用的是V2Ray，所以提一个优化的点。对于浏览网页较多的场景，可以开启 Mux 的选项， Mux Concurrency 保持默认就行。开启这个功能有可以降低请求的响应延时，但是对于下载速度没有变化，甚至可能会有反作用，具体 V2Ray 的官方文档有提到。<br>
添加完节点后就是全局设置了，依旧截一个图解决问题。<strong>国内的DNS，指向SmartDNS的端口。</strong> 细心的朋友会发现，这里TCP节点是 <code>127.0.0.1</code> 指向本地端口，这个具体后面会提到。<br>
<img src="https://cclog.net/post-images/1582657052040.jpg" alt="" loading="lazy"></p>
<h1 id="3haproxy">3.Haproxy</h1>
<p>这部分也是重头戏了，配置得当，对于机场节点不是很稳的朋友会友不错的提升。这部分需要一定的动手能力，好啦，我们开始吧。<br>
首先我并没有使用路由器内自带的 Haproxy 的功能，具体原因很简单，配置不够灵活。所以，我这里用 Docker 启动 Haproxy 。</p>
<p>首先准备一个 Haproxy 的配置文件 haproxy.cfg ，模板如下：</p>
<pre><code>global
    ulimit-n 1048576
    no log
    # Distribute the health checks with a bit of randomness (value in percent of check interval)
    spread-checks 20
    # Limit the spread of checks, or services would take too long coming online (value in milliseconds)
    max-spread-checks 5000
    # progress number，CPU 有几个核心就修改成对应的数字
    nbproc 2

defaults
    option dontlognull
    option dontlog-normal
    option srvtcpka
    option clitcpka
    option splice-auto # 启用对于套接字双向地自动内核加速。
    option splice-request
    option splice-response
    maxconn 65535
    timeout connect 1000ms # 对线路要求高，超过1000ms就认为服务不可用
    timeout client  300s
    timeout server  300s
    timeout check   2s
    retries 1            # 1次连接失败就认为服务器不可用，主要通过后面的check检查
    option  redispatch   #当serverid对应的服务器挂掉后，强制定向到其他健康服务器
    option  abortonclose #当服务器负载很高时，自动结束掉当前队列中处理比较久的链接
    default-server check inter 3000 rise 8 fall 4 weight 255 slowstart 3h 

resolvers mydns
    nameserver dns1 127.0.0.1:53
    nameserver dns2 8.8.8.8:53
    nameserver dns3 1.1.1.1:53
    resolve_retries      9999
    timeout retry        1s
    hold other           300s
    hold refused         300s
    hold nx              300s
    hold timeout         300s
    hold valid           100s

listen haproxy_stats
    bind 0.0.0.0:7070  #侦听IP:Port
    mode http
    stats enable
    stats refresh 1m
    stats uri /
    stats realm Haproxy\ Statistics
    stats admin if TRUE  #手工启用/禁用后端服务器

frontend mps-in
    bind :8001  # 本地服务端口
    default_backend mps-out

backend mps-out
    mode tcp
    option  tcp-check
    option  forwardfor
    balance roundrobin
    # 一下是服务器节点设置
    server abc1  abc1.com:1234
    server abc2  abc2.com:1443
</code></pre>
<p>修改配置文件的最后的服务器节点和端口，这批节点需要是同样的协议，用户名，密码等等。编辑好以后，放在路由器的这个路径上 <code>/opt/haproxy.cfg</code> ，其实文件位置随意，后面生成 Docker 的时候，记得对应修改就行。懒得折腾就使用我这个路径。但注意不要放在 <code>/etc</code> 下面，免得被系统覆盖。<br>
接下来新建 Docker 容器，具体配置同样一张截图：<br>
<img src="https://cclog.net/post-images/1582660086520.png" alt="" loading="lazy"><br>
挂载(-v) 图上看不全，请填入 <code>/opt/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg</code> ，创建过程比较长，提交后耐心等待。<br>
至此，还差最后一步，整个配置过程就完成了，修改你的节点，把服务器地址指向 <code>127.0.0.1</code> 端口 <code>8001</code> 即可。<br>
最后，说说为什么要大费周章的通过 Docker 来启动 Haproxy，主要有一下原因，可以灵活定制超时的时间，同时启用了 <code>slowstart</code> 功能，我设置了 3 个小时，开启这个功能的好处在于，经常挂掉的节点，权重会降低，这样参与负载均衡的都是速度快且稳定的节点了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[推荐一个轻量的 Github Pages 静态博客写作客户端 Gridea ]]></title>
        <id>https://cclog.net/post/recommend-gridea/</id>
        <link href="https://cclog.net/post/recommend-gridea/">
        </link>
        <updated>2019-10-27T07:54:15.000Z</updated>
        <summary type="html"><![CDATA[<p>最近又燃起了写博客的冲动，有很大一部分的原因就是看到的 Gridea 的这个简单轻巧的静态博客客户端。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近又燃起了写博客的冲动，有很大一部分的原因就是看到的 Gridea 的这个简单轻巧的静态博客客户端。</p>
<!-- more -->
<p>提到静态博客，大家可能首先会想到 <a href="https://hexo.io/zh-cn/index.html">Hexo</a> 。 的确， Hexo 是一个很强大的静态博客框架，也有一个看着还不错的客户端 <a href="https://electronjs.org/apps/hexo-client">Hexo Client</a> ，但是我今天说的并不是它。</p>
<figure data-type="image" tabindex="1"><img src="https://cclog.net/post-images/1572168991131.png" alt="" loading="lazy"></figure>
<p>得益于功能的简单，Gridea 在易用性上其实不错，不过对于非程序员用户还是稍显复杂，需要花一点时间研究和配置。Gridea 作为桌面客户端，支持 Mac、Windows 和 Linux。可以管理 Github Pages 和 Coding，因此，你不需要自己搭建额外的服务器，也免去了维护服务器的各种烦恼。</p>
<p>支持 Markdown 语法，进行快速创作。<br>
可以方便的给文章配上精美的封面图和在文章任意位置插入图片。<br>
简单配置即可接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统。<br>
支持第三方主题，官方也有几个不错的主题可选。</p>
<p>Gridea 安装和配置其实非常简单，可以查看 <a href="https://gridea.dev/docs/"><strong>官方安装教程</strong></a> 安装教程，视频文字均有。</p>
<h3 id="我是怎样使用-gridea">我是怎样使用 Gridea</h3>
<p>博客托管于 Github Pages。</p>
<p>由于域名没有备案，我用了 CloudFlare 作为页面 CDN 加速。</p>
<p>为了简洁，评论系统没有使用内置支持的 Gitalk 和 DisqusJS， 而是 <a href="https://valine.js.org/">Valine</a> 通过 <a href="https://github.com/DesertsP/Valine-Admin">Valine-Admin</a> 作为管理。自己动手优化了评论阅读体验。</p>
<p>主题选用官方的 Notes，并在此基础上做了一些微调。</p>
<p>博客的源文件同步，利用 Syncthing 做了多设备的同步，方便任何一台电脑都能管理和撰写Blog，具体见上一篇 <a href="https://cclog.net/post/using-syncthing/"><strong>我是如何使用 Syncthing 提升工作效率的</strong></a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我是如何使用 Syncthing 提升工作效率的]]></title>
        <id>https://cclog.net/post/using-syncthing/</id>
        <link href="https://cclog.net/post/using-syncthing/">
        </link>
        <updated>2019-10-22T13:43:43.000Z</updated>
        <summary type="html"><![CDATA[<p>Syncthing 是一个安全的去中心化的文件共享工具，类似 BitTorrent Sync，不过这款产品是开源的，完全免费。具体工作原理有点类似早期的 BT 下载，需要一个发现服务器，从而让你的设备们相互建立连接。好在发现服务器在程序安装好以后就会默认配置官方的发现服务器，通常使用就已经足够了，当然你也可以自己搭建一个私有的发现服务器。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Syncthing 是一个安全的去中心化的文件共享工具，类似 BitTorrent Sync，不过这款产品是开源的，完全免费。具体工作原理有点类似早期的 BT 下载，需要一个发现服务器，从而让你的设备们相互建立连接。好在发现服务器在程序安装好以后就会默认配置官方的发现服务器，通常使用就已经足够了，当然你也可以自己搭建一个私有的发现服务器。</p>
<!-- more -->
<p>网上很多人说 Syncthing 是一个私人网盘，其实我不太认同。这款软件本身不会存储你任何文件，也不会上传文件到任何第三方的服务器。它做的只是帮助你把文件同步到不同设备上而已。当然，同步过程中，至少要有两台设备都是开机状态。Syncthing 使用 TLS 加密，避免中间人窃取数据。</p>
<p>此外 Syncthing 同步速度特别快，特别是在局域网中，这体验是iCloud、Dropbox等各种网盘不能比的。同时如果有多台设备同时参与同步，文件共享的速度甚至会比点对点直接发文件更快，有点类似 BT 下载。</p>
<p>Syncthing 支持Mac，Windows，Linux等平台。具体安装使用说明可以参考 <a href="https://syncthing.net">Syncthing官网</a>，这里就不过多赘述。</p>
<p>开始之前先说说我设备的情况，我有两台 Macbook，家里有的一台 Windows 台式机，和一台常年开机的Linux工控主机。通常，我会在公司放一台 MacBook，在家会用 Windows 台式机，偶尔会用另外一台 MacBook。</p>
<p><strong>同步桌面以及重要的工作文件：</strong> 通常如果都是 Mac，可以开 iCloud 同步多台 Mac 之间的同步文件。但是对于跨平台就无能为力了。所以这时候可以有 Syncthing 出场了。我关掉了所有 iCloud 的文件同步，首先用 Syncthing 同步了三台电脑的桌面以及一个用来存放各种工作文件的文件夹。因为我有个习惯，当前的工作文件会放在桌面上。这样一来，三台电脑桌面就可以保持完全同步，下班回家也不用带电脑回去，未完成的工作，到家了可以继续。这里有一个很重要的点，就是那台Linux工控主机，它也参与了文件共享，充当了一个文件中转的作用，这样即使家里其他电脑没有开机，也不用担心文件无法同步。</p>
<p><strong>同步常用软件的配置：</strong> 比如 VIM、ZSH、TMUX、Clash，甚至现在写博客用的 Gridea 工作文件夹等等，这些工具在使用过程中，当遇到问题的时候，顺手修改配置，如果多台设备需要挨个修改配置也是非常麻烦，甚至修改多了以后，不同电脑的软件配置会完全不一样。当有了 Syncthing 以后，一切都变得那么自然，所有电脑都步调一致。当然，如果都是 Mac，你可以同步整个个人文件夹，这样会来的更加简单粗暴。</p>
<p><strong>与好基友共享一些你懂的资源：</strong> 这个不能提升工作效率！</p>
<p>下面说说 Syncthing 在使用过程中的小技巧。</p>
<p><strong>文件忽略：</strong> Syncthing 提供了一个 <code>.stignore</code> 功能，类似于 <code>.gitignore</code>， 但是这个 <code>.stignore</code> 有一个问题，Syncthing 本身并不会同步这个文件，导致多台设备的文件忽略都要单独配置，更蛋疼的地方在于，一旦修改了这个配置，又要重复以上的工作。针对这个问题，可以建一个 <code>.stglobalignore</code> 文件，把具体的忽略信息写到 <code>.stglobalignore</code> 里面，然后如下图所示的配置即可。<br>
<img src="https://cclog.net/post-images/1571757802254.png" alt="" loading="lazy"></p>
<p><strong>Mac Linux Windows 之间共享的常用 <code>.stglobalignore</code> :</strong></p>
<pre><code>//---Mac-specific---//
//Mac Comments, Finder Windows Size, Tags, ...
(?d).DS_Store
.DocumentRevisions-V100
//Mac Folder Icons, which will not sync to Windows
(?d)Icon*
.Spotlight-V100
.TemporaryItems
.Trashes
.fseventsd
//Mac Flag to enable translation of Folder Names
(?d).localized
//Mac Temporary iCloud files while synching
.iCloud
//Mac OS Metadata on Windows or Linux filesystems
(?d)._*

//---Windows-Specific---//
(?d)desktop.ini
(?d)Thumbs.db
(?d)$RECYCLE.BIN
*.lnk

//---Linux-specific---//
.Trash-*

//---QNAP-specific---//
(?d).@__thumb
(?d).AppleDB

//---Synology-specific---//
(?d)@eaDir

//---Application-specific---//
//-Syncthing
(?d).stignore
(?d).stfolder
//-vi(m)
(?d)*.*.sw[a-p] # Thankys to Tom Hale!
//-Dropbox
.dropbox
.dropbox.attr
//-Microsoft Office temporary files/lock files
(?d)~*
//-KDE
.directory

//---OTHER---//
Microsoft-Benutzerdaten
Notizbuch von Wolf.url
Outlook-Dateien
RDC Connections
.parallels-vm-directory
Default.rdp

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[回归 Blog]]></title>
        <id>https://cclog.net/post/hello-blog/</id>
        <link href="https://cclog.net/post/hello-blog/">
        </link>
        <updated>2019-10-18T04:53:49.000Z</updated>
        <summary type="html"><![CDATA[<p>如今，开个公众号、知乎专栏已经是常规操作，抖音、vlog 也不足为奇，大家渐渐的习惯了快餐文化，习惯了推送过来的信息，习惯了不用动脑的下饭视频。</p>
]]></summary>
        <content type="html"><![CDATA[<p>如今，开个公众号、知乎专栏已经是常规操作，抖音、vlog 也不足为奇，大家渐渐的习惯了快餐文化，习惯了推送过来的信息，习惯了不用动脑的下饭视频。</p>
<!-- more -->
<p>13年以后，我就没有再写过博客了，早年的 wordpress 做了一次全站备份后也删除了服务器。最近几年，渐渐的，不再使用微博，也不再天天刷朋友圈。现在，是时候让自己静下来，用最简单的文字，记录自己的思考，分享一些创业的感悟，还有那些在这过程中遇到的人和事。</p>
<p>未来，也不排除会同步内容到微信、知乎专栏，但是在这里会努力一直更新下去。</p>
<p>BTW，最近开启了一段宠物智能硬件相关的创业，祝我好运吧 ~</p>
]]></content>
    </entry>
</feed>